#!/bin/bash

PYTHON_VERSIONS="without_python 3.6.0 3.7.0 3.8.0 3.9.0 3.10.0"
MACOS_PYTHON_VERSIONS="3.6.13 3.7.10 3.8.10 3.9.5 3.10.0b2"
ESP_CHIPS="esp32 esp32s2"

declare -a ARCHITECTURES_ARRAY=("x86_64-linux-gnu"
                                "i586-linux-gnu"
                                "arm-linux-gnueabi"
                                "arm-linux-gnueabihf"
                                "aarch64-linux-gnu"
                                "i686-w64-mingw32"
                                "x86_64-w64-mingw32"
                                "x86_64-apple-darwin14")



# e.g. a postfix of image for "arm-linux-gnueabi" is "arm-cross".
# Note that sequence of array is important
declare -a IMAGE_POSTFIX_ARRAY=(""
                                "-x86"
                                "-arm-cross"
                                "-arm-cross"
                                "-arm-cross"
                                "-win-cross"
                                "-win64-cross"
                                "-macos-cross")

declare -a PRETTY_NAME_ARRAY=(  "linux_amd64"
                                "linux_i686"
                                "linux_armel"
                                "linux_armhf"
                                "linux_arm64"
                                "win"
                                "win64"
                                "macos")

ARCHITECTURES_ARRAY_LENGHT=${#ARCHITECTURES_ARRAY[@]}

test $ARCHITECTURES_ARRAY_LENGHT != ${#IMAGE_POSTFIX_ARRAY[@]} && echo "Bad arrays initialization" && exit 1
test $ARCHITECTURES_ARRAY_LENGHT != ${#PRETTY_NAME_ARRAY[@]} && echo "Bad arrays initialization" && exit 1

read -r -d '' build_arch_python <<-EOF
\$ARCH_TRIPLET-\$PYTHON_VERSION
  image: \$BUILD_IMAGE
      eval "echo \"$build_arch_python\""
EOF

function build_arch() {
  ARCH_TRIPLET=$1
  IMAGE_SUFFIX=$2
  echo ""
  for PYTHON_VERSION in $PYTHON_VERSIONS; do
    echo "$ARCH_TRIPLET-$PYTHON_VERSION:"
    echo "  image: \$CI_DOCKER_REGISTRY/esp32-toolchain$IMAGE_SUFFIX:\$TOOLCHAIN_IMAGE_TAG"
    echo "  extends: .build_template"
  done;
  echo ""
  echo ""
}

function test_arch_linux() {
  ARCH_TRIPLET=$1
  IMAGE_SUFFIX=$2
  RUNNER_TAGS=$3
  for PYTHON_VERSION in $PYTHON_VERSIONS; do
    echo ""
    echo ""
    for ESP_CHIP in $ESP_CHIPS; do
      TEST_TEMPLATE=
      if [ $ESP_CHIP == "esp32" ]; then
          TEST_TEMPLATE=".test_qemu_template"
      else
          TEST_TEMPLATE=".test_no_qemu_template"
      fi
      echo "$ESP_CHIP-test-$ARCH_TRIPLET-$PYTHON_VERSION:"
      echo "  tags: $RUNNER_TAGS"
      echo "  variables:"
      echo "    ESP_CHIP: $ESP_CHIP"
      echo "    PYTHON_VERSION: $PYTHON_VERSION"
      echo "  image: \$CI_DOCKER_REGISTRY/esp32-dejagnu$IMAGE_SUFFIX:\$DEJAGNU_IMAGE_TAG"
      echo "  needs: [ $ARCH_TRIPLET-$PYTHON_VERSION ]"
      echo "  extends: $TEST_TEMPLATE"
      echo ""
    done;
  done;
}

function test_macos() {
  for PYTHON_VERSION in $MACOS_PYTHON_VERSIONS; do
    echo ""
    echo ""
    for ESP_CHIP in $ESP_CHIPS; do
      echo "$ESP_CHIP-test-macos-$PYTHON_VERSION:"
      echo "  tags: [ macos_shell ]"
      echo "  variables:"
      echo "    ESP_CHIP: $ESP_CHIP"
      echo "    TEST_PYTHON_VERSION: $PYTHON_VERSION"
      echo "  needs: [ x86_64-apple-darwin14-${PYTHON_VERSION%.*}.0 ]"
      echo "  extends: .test_macos_template"
      echo ""
    done;
  done;
}

function test_windows() {
  echo ""
  echo ""
  for ESP_CHIP in $ESP_CHIPS; do
    echo "$ESP_CHIP-test-windows:"
    echo "  tags: [ windows, powershell ]"
    echo "  variables:"
    echo "    ESP_CHIP: $ESP_CHIP"
    echo "  needs: [ x86_64-w64-mingw32-without_python ]"
    echo "  extends: .test_windows_template"
    echo ""
  done;
}

function pack_output() {
  ARCH_TRIPLET=$1
  IS_TESTED=$2
  RUNNER_TAGS=$3
  ARCHIVE_PREFIX=$4
  if [ -z "${ARCHIVE_PREFIX}" ]; then
    echo "ARCHIVE PREFIX WAS NOT SPECIFIED!" | tee >(cat >&2)
    exit 1
  fi
  echo ""
  echo "pack-$ARCH_TRIPLET:"
  echo "  variables:"
  echo "    ARCHIVE_PREFIX: ${ARCHIVE_PREFIX}"
  echo "  tags: $RUNNER_TAGS"
  echo "  needs:"
  for PYTHON_VERSION in $PYTHON_VERSIONS; do
    echo "    - $ARCH_TRIPLET-$PYTHON_VERSION"
  done;
  echo "  extends: .pack_template"
  echo ""
  echo ""
}

function upload_to_http() {
  echo ""
  echo "upload_to_http:"
  echo "  needs:"
  for (( i=0; i<${ARCHITECTURES_ARRAY_LENGHT}; i++ ));
  do
    echo "    - pack-${ARCHITECTURES_ARRAY[$i]}"
  done
  echo "  extends: .private_deploy_template"
  echo ""
  echo ""
}


read -r -d '' header <<-EOF
# DO NOT EDIT!
# THIS FILE WAS GENERATED BY .gitlab-ci.yml-gen.sh
# JUST MODIFY IT IF YOU NEED AND UPDATE WITH:
# $ ./jobs.yml-gen.sh > ./jobs.yml

include: '.gitlab/ci/gdb-test-suites.yml'
EOF

echo "$header"
echo ""


for (( i=0; i<${ARCHITECTURES_ARRAY_LENGHT}; i++ ));
do
  echo "# BUILD ${PRETTY_NAME_ARRAY[$i]}"
  build_arch ${ARCHITECTURES_ARRAY[$i]} ${IMAGE_POSTFIX_ARRAY[$i]}
done

echo "# TEST LINUX x86_64"
test_arch_linux "x86_64-linux-gnu" "" "[ \"amd64\", \"build\" ]"

echo "# TEST MACOS x86_64"
test_macos

echo "# TEST WINDOWS x86_64"
test_windows

for (( i=0; i<${ARCHITECTURES_ARRAY_LENGHT}; i++ ));
do
  echo "# PACK GDB ${PRETTY_NAME_ARRAY[$i]}"
  IS_TESTED="n"
  if [ ${ARCHITECTURES_ARRAY[$i]} == "x86_64-linux-gnu" ]; then
    IS_TESTED="y"
  fi
  pack_output ${ARCHITECTURES_ARRAY[$i]} $IS_TESTED "[ \"amd64\", \"build\" ]" ${PRETTY_NAME_ARRAY[$i]}
done

upload_to_http
