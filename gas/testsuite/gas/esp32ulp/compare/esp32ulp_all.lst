ESP32ULP GAS  ./gas/testsuite/gas/esp32ulp/esp32ulp_all.s 			page 1


   1              		 .data
   2 0000 2A00     	foodata:.word 42
   3              		.text
   4              		.global a1
   5              		.global a2
   6              		.global a3
   7              		.global a4
   8              		.global __start
   9              		.global l1
  10              		.global l2
  11              		.global l3
  12              		.set c1, 0x03
  13              		.set c2, 0x2222
  14              	
  15              	__start:
  16 0000 00000040 	        nop
  17              	// Add
  18 0004 39000070 	        ADD R1, R2, R3                          //R1 = R2 + R3
  19 0008 49230172 	        Add R1, R2, 0x1234                      //R1 = R2 + 0x1234
  20              	
  21              	        .set value1, 0x03                       //constant value1=0x03
  22 000c 39000072 	        Add R1, R2, value1                      //R1 = R2 + value1
  23              	
  24              	        .global label1                          //declaration of variable label
  25 0010 09000072 	        Add R1, R2, label1                      //R1 = R2 + label
  26 0014 00000040 	label1: nop                                     //definition of variable label
  27              	// Sub
  28 0018 39002070 	         SUB R1, R2, R3                         //R1 = R2 - R3
  29              	
  30 001c 49232172 	         sub R1, R2, 0x1234                     //R1 = R2 - 0x1234
  31              	
  32 0020 39002072 	         SUB R1, R2, value1                     //R1 = R2 - value1
  33              	         .global label2                         //declaration of variable label
  34 0024 09002072 	         SUB R1, R2, label2                     //R1 = R2 - label
  35 0028 00000040 	label2:  nop                                    //definition of variable label
  36              	// And
  37 002c 39004070 	         AND R1, R2, R3                         //R1 = R2 & R3
  38 0030 49234172 	         AND R1, R2, 0x1234                     //R1 = R2 & 0x1234
  39 0034 39004072 	         AND R1, R2, value1                     //R1 = R2 & value1
  40              	         .global label                          //declaration of variable label
  41 0038 F9004072 	         AND R1, R2, label3                     //R1 = R2 & label
  42 003c 00000040 	label3:  nop                                    //definition of variable label
  43              	// Or
  44 0040 39006070 	       OR R1, R2, R3                            //R1 = R2 \| R3
  45 0044 49236172 	       OR R1, R2, 0x1234                        //R1 = R2 \| 0x1234
  46 0048 39006072 	       OR R1, R2, value1                        //R1 = R2 \| value1
  47              	       .global label4                           //declaration of variable label
  48 004c 09006072 	       OR R1, R2, label4                        //R1 = R2 \|label
  49 0050 00000040 	label4: nop                                     //definition of variable label
  50              	// LSH
  51 0054 3900A070 	       LSH R1, R2, R3                           //R1 = R2 << R3
  52              	
  53 0058 3900A072 	       LSH R1, R2, 0x03                         //R1 = R2 << 0x03
  54              	
  55 005c 3900A072 	       LSH R1, R2, value1                       //R1 = R2 << value1
  56              	
  57              	       .global label5                           //declaration of variable label
ESP32ULP GAS  ./gas/testsuite/gas/esp32ulp/esp32ulp_all.s 			page 2


  58 0060 0900A072 	       LSH R1, R2, label5                       //R1 = R2 << label
  59 0064 00000040 	label5:  nop                                    //definition of variable label
  60              	// RSH
  61 0068 3900C070 	        RSH R1, R2, R3                          //R1 = R2 >> R3
  62              	
  63 006c 3900C072 	        RSH R1, R2, 0x03                        //R1 = R2 >> 0x03
  64              	                                                                       
  65 0070 3900C072 	        RSH R1, R2, value1                      //R1 = R2 >> value1
  66              	
  67              	        .global label6                          //declaration of variable label
  68 0074 0900C072 	        RSH R1, R2, label6                      //R1 = R2 >> label
  69 0078 00000040 	label6:  nop                                    //definition of variable label
  70              	// Move
  71 007c 29008070 	        MOVE       R1, R2                       //R1 = R2 >> R3
  72              	
  73 0080 31008072 	        MOVE       R1, 0x03                     //R1 = R2 >> 0x03
  74              	
  75 0084 31008072 	        MOVE       R1, value1                   //R1 = value1
  76              	
  77              	        .global     label7                      //declaration of variable label
  78 0088 01008072 	        MOVE        R1, label7                  //R1 = label
  79 008c 00000040 	label7:  nop                                    //definition of variable label
  80              	// ST
  81 0090 09100068 	        ST  R1, R2, 0x12                        //MEM[R2+0x12] = R1
  82              	
  83              	        .data                                   //Data section definition
  84 0002 7B00     	Addr1:  .word     123                           // Define label Addr1 16 bit
  85              	        .set      offs, 0x04                    // Define constant offs
  86              	        .text                                   //Text section definition
  87 0094 11008072 	        MOVE      R1, 1                         // R1 = 1
  88 0098 02008072 	        MOVE      R2, Addr1                     // R2 = Addr1
  89 009c 09040068 	        ST        R1, R2, offs                  // MEM[R2 +  4] = R1
  90              	                                                // MEM[Addr1+4] will be 1
  91              	// After operation value at Addr1 will be = 1
  92              	
  93 00a0 091000D0 	        LD  R1, R2, 0x12                        //R1 = MEM[R2+0x12]
  94              	
  95              	        .data                                   //Data section definition
  96 0004 7B00     	Addr2:  .word     123                           // Define label Addr1 16 bit
  97              	        .set      offs, 0x04                    // Define constant offs
  98 0006 0000     	        .text                                   //Text section definition
  99 00a4 11008072 	        MOVE      R1, 1                         // R1 = 1
 100 00a8 12008072 	        MOVE      R2, Addr2                     // R2 = Addr1
 101 00ac 090400D0 	        LD        R1, R2, offs                  // R1 = MEM[R2 +  4]
 102              	                                                // R1 will be 123
 103              	// After operation value in register R1 will be the same as in Addr1, i.e. 1
 104              	  // Jump   
 105              	        .global    j1
 106 00b0 01008072 	        Move       R1, j1
 107 00b4 01002080 	        JUMP       R1                           //Jumps to R1 pointer
 108 00b8 00000040 	        nop;
 109 00bc 20014080 	j1:     JUMP       0x120, EQ                    //Jumps to address 0x120 if ALU equivale to 0
 110              	
 111              	        .global    labelj                       //declaration of variable label
 112              	
 113 00c0 00000080 	        JUMP       labelj                       // jump to address - label
 114 00c4 00000040 	        nop
ESP32ULP GAS  ./gas/testsuite/gas/esp32ulp/esp32ulp_all.s 			page 3


 115 00c8 00000040 	labelj:  nop                                    //definition of variable label
 116              	// Jumpr
 117              	
 118 00cc 14000382 	pos:    JUMPR       4, 20, GE                   //Jump to address "position + 4" if value in R0 >= 
 119 00d0 00000040 	        nop
 120              	        .global     labeljr                     //declaration of variable label
 121              	// Just making loop with 16 times NOP operation
 122 00d4 00018072 	        MOVE        R0, 16                      // load 16 to R0
 123 00d8 11008072 	        MOVE        R1, 1                       // load 1 to R1
 124 00dc 10002070 	labeljr:  SUB         R0, R0, R1                // R0 = R0-1;
 125 00e0 00000040 	        NOP                                     // do something
 126 00e4 01000583 	        JUMPR       labeljr,1,GE                // jump to address label if R0 >= 0
 127              	
 128              	//jumps
 129              	
 130 00e8 14000384 	         JUMPS     4, 20, EQ                    //Jump to address “position + 16” if value in S
 131 00ec 00000040 	         nop
 132 00f0 00000040 	         nop
 133              	        .global    labeljs                      //declaration of variable label
 134              	// Just making loop with 16 times NOP operation
 135 00f4 00004074 	        STAGE_RST                               // set stage_cnt to 0
 136 00f8 10000074 	labeljs:  STAGE_INC  1                          // stage_cnt++;
 137 00fc 00000040 	        NOP                                     // do something
 138 0100 10000485 	        JUMPS       labeljs,16,LT               // jump to address label if stage_cnt < 16
 139 0104 00000040 	        nop
 140              	// Stage count
 141 0108 00004074 	        STAGE_RST
 142              	// Stage Inc
 143 010c A0000074 	        STAGE_INC      10                       // stage_cnt += 10;
 144              	
 145              	        .global    labelsi                      //declaration of variable label
 146              	// Just making loop with 16 times NOP operation
 147 0110 00004074 	        STAGE_RST                               // set stage_cnt to 0
 148 0114 10000074 	labelsi:  STAGE_INC  1                          // stage_cnt++;
 149 0118 00000040 	        NOP                                     // do something
 150 011c 10000485 	        JUMPS       labelsi,16,LT               // jump to address label if stage_cnt < 16
 151              	// Stage Dec
 152              	
 153 0120 A0002074 	        STAGE_DEC      10                       // stage_cnt -= 10;
 154              	
 155              	        .global    labelsd                      //declaration of variable label
 156              	// Just making loop with 16 times NOP operation
 157 0124 00004074 	        STAGE_RST                               // set stage_cnt to 0
 158 0128 00010074 	        STAGE_INC  16                           // set stage_cnt to 16
 159 012c 10002074 	labelsd:  STAGE_DEC  1                          // stage_cnt--;
 160 0130 00000040 	        NOP                                     // do something
 161 0134 00800485 	        JUMPS       labelsd,0,GT                // jump to address label if stage_cnt > 0
 162              	
 163              	// Sleep
 164              	        .set sleep_cnt, 3                      // set global constant
 165 0138 03000092 	        SLEEP  sleep_cnt                        // Sleep for 10 cycles
 166              	// Wait
 167              	        .set  wait_cnt, 10                      // set global constant
 168 013c 0A000040 	        WAIT  wait_cnt                          // wait for 10 cycles
 169              	
 170              	// TSENS
 171 0140 290000A0 	        TSENS     R1, 10                        // Measure temperature sensor for 10 cycles,
ESP32ULP GAS  ./gas/testsuite/gas/esp32ulp/esp32ulp_all.s 			page 4


 172              	                                                // move result to R1 and wait 10 cycles
 173              	// ADC
 174 0144 05000050 	       ADC      R1, 0, 1, 100                   // Measure value form ADC0 pad 2,
 175              	                                                //for 10 cycles and move result to R1
 176              	// REG_RD/REG_WR
 177              	
 178 0148 20008820 	        REG_RD      0x20, 1, 2                 // R0[1:2] = REG[0x120]
 179 014c 20408810 	        REG_WR      0x20, 1, 2,0x10            // REG[0x120] = 0x10[1:2]
 180              	
 181 0150 000000B0 	        HALT                                    // Move chip to powerdown
