include:
  - template: 'Workflows/Branch-Pipelines.gitlab-ci.yml'
  - '.gitlab/ci/jobs.yml'

stages:
  - images
  - build
  - pack
  - private_deploy
  - test
  - release_submit
  - update_idf_tools

image: $CI_REGISTRY_IMAGE/gdb-build-linux-x86_64:$CI_COMMIT_SHA
variables:
  GIT_SUBMODULE_STRATEGY: recursive
  TOOLCHAIN_IMAGE_TAG: 3
  DEJAGNU_IMAGE_TAG: 20210826-3
  GDB_DIST_DIR: ${CI_PROJECT_DIR}/dist

  GITHUB_IMAGE_TAG: 2

  # GitHub Tool options
  GITHUB_USER: "${GH_USER}"
  GITHUB_REPO: "${GH_REPO}"
  GITHUB_TOKEN: "${GH_TOKEN}"

  LINUX_ARCHIVE_TOOL: "tar czvf"
  LINUX_ARCHIVE_EXT: "tar.gz"

.get_release_version: &get_release_version |
  ESP_GDB_VERSION=${CI_COMMIT_TAG:-""}
  ESP_GDB_VERSION=${ESP_GDB_VERSION#"esp-gdb-v"}
  ESP_GDB_VERSION=${ESP_GDB_VERSION:-${CI_COMMIT_SHORT_SHA}}

.gen_sha256_file: &gen_sha256_file |
  FILES_LIST=$(find * -type f -name "*esp-elf-gdb-${ESP_GDB_VERSION}*")
  SHA256_FILE="esp-gdb-${ESP_GDB_VERSION}-checksum.sha256"
  for n in $FILES_LIST; do
    sz=$(stat -c%s "${n}") >> ${SHA256_FILE};
    printf "# %s: %s bytes\n" "${n}" "${sz}" >> ${SHA256_FILE};
    sha256sum -b "${n}" >> ${SHA256_FILE};
  done

.build_image: &build_image
  stage: images
  image: espressif/dind:1
  tags: [ "dind", "internet", "amd64" ]
  variables:
    TOOLCHAIN_TAG: 3
  artifacts:
    expire_in: 1 week
    when: on_failure
    paths:
      - ${CI_PROJECT_DIR}/build.log
  script:
    - cd .gitlab/docker
    # This is workaround for https://github.com/edrevo/dockerfile-plus/issues/13
    # After the bug is fixed, please remove the line below.
    - ./dockerfile-plus_workaround.sh ${DOCKERFILE_NAME} && cat ${DOCKERFILE_NAME}
    - echo -n $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
    - echo -n $DOCKER_REGISTRY_PASS | docker login -u $DOCKER_REGISTRY_USER --password-stdin $CI_DOCKER_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE/$IMAGE_NAME:latest || true
    - docker build
        --cache-from $CI_REGISTRY_IMAGE/$IMAGE_NAME:latest
        --file $DOCKERFILE_NAME
        --build-arg DOCKER_REGISTRY=$CI_DOCKER_REGISTRY
        --build-arg TOOLCHAIN_TAG=$TOOLCHAIN_TAG
        --tag $CI_REGISTRY_IMAGE/$IMAGE_NAME:$CI_COMMIT_SHA
        --tag $CI_REGISTRY_IMAGE/$IMAGE_NAME:latest .
        > ${CI_PROJECT_DIR}/build.log
    - docker push $CI_REGISTRY_IMAGE/$IMAGE_NAME:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE/$IMAGE_NAME:latest

image_linux_x86:
  variables:
    DOCKERFILE_NAME: Dockerfile.linux-x86
    IMAGE_NAME: gdb-build-linux-x86
  extends: .build_image

image_linux_x86_64:
  variables:
    DOCKERFILE_NAME: Dockerfile.linux-x86_64
    IMAGE_NAME: gdb-build-linux-x86_64
  extends: .build_image

image_linux_armel:
  variables:
    DOCKERFILE_NAME: Dockerfile.linux-armel
    IMAGE_NAME: gdb-build-linux-armel
  extends: .build_image

image_linux_armhf:
  variables:
    DOCKERFILE_NAME: Dockerfile.linux-armhf
    IMAGE_NAME: gdb-build-linux-armhf
  extends: .build_image

image_linux_arm64:
  variables:
    DOCKERFILE_NAME: Dockerfile.linux-arm64
    IMAGE_NAME: gdb-build-linux-arm64
  extends: .build_image

image_win_x86:
  variables:
    DOCKERFILE_NAME: Dockerfile.win-x86
    IMAGE_NAME: gdb-build-win-x86
  extends: .build_image

image_win_x86_64:
  variables:
    DOCKERFILE_NAME: Dockerfile.win-x86_64
    IMAGE_NAME: gdb-build-win-x86_64
  extends: .build_image

image_macos_x86_64:
  variables:
    DOCKERFILE_NAME: Dockerfile.macos-x86_64
    IMAGE_NAME: gdb-build-macos-x86_64
  extends: .build_image

.release_submit_action: &release_submit_action
  image: espressif/github-hub:${GITHUB_IMAGE_TAG}
  when: manual
  allow_failure: true
  before_script:
    - set -o errexit; set -o pipefail; set -o nounset
    - test "${DEBUG_SHELL:-''}" = "1" && set -x
    - git remote remove github || true
    - git remote add github ${GH_REPO_HTTPS}
  variables:
    GIT_STRATEGY: fetch
    GH_REL_TAG: ${CI_COMMIT_TAG}

before_script:
  - set -o errexit; set -o pipefail; set -o nounset
  - test "${DEBUG_SHELL:-''}" = "1" && set -x

.release_tag_filter: &release_tag_filter
  only:
    - /^esp-gdb-v.*$/

.needs_all_distros: &needs_all_distros
  needs:
    - pack-xtensa-x86_64-linux-gnu
    - pack-riscv32-x86_64-linux-gnu
    - pack-xtensa-i586-linux-gnu
    - pack-riscv32-i586-linux-gnu
    - pack-xtensa-arm-linux-gnueabi
    - pack-riscv32-arm-linux-gnueabi
    - pack-xtensa-arm-linux-gnueabihf
    - pack-riscv32-arm-linux-gnueabihf
    - pack-xtensa-aarch64-linux-gnu
    - pack-riscv32-aarch64-linux-gnu
    - pack-xtensa-i686-w64-mingw32
    - pack-riscv32-i686-w64-mingw32
    - pack-xtensa-x86_64-w64-mingw32
    - pack-riscv32-x86_64-w64-mingw32
    - pack-xtensa-x86_64-apple-darwin14
    - pack-riscv32-x86_64-apple-darwin14

.use_ci_tools: &use_ci_tools |
  curl -sSL ${CIT_LOADER_URL} -o cit_loader.sh && sh cit_loader.sh
  source citools/import_functions

# Common template for all builds
.build_template: &build_template
  stage: build
  tags: [ "build", "amd64" ]
  artifacts:
    paths:
      - ${GDB_DIST_DIR}
    when: always
    expire_in: 1 week
  script:
    - *get_release_version
    - echo ${ESP_GDB_VERSION} > ./gdb/version.in
    - ./build_esp_gdb.sh ${BUILD_ARCH_TRIPLET} ${ESP_CHIP_ARCH} ${PYTHON_VERSION} ${GDB_DIST_DIR}

# Template for tests with qemu
.test_qemu_template: &test_qemu_template
  stage: test
  artifacts:
    when: on_failure
    paths:
      - ${CI_PROJECT_DIR}/gdb/testsuite/gdb.log
  script:
    - cd gdb/testsuite
    - cp -R ${GDB_DIST_DIR}/share/gdb/* ../data-directory/
    - ./configure --target=${ESP_CHIP_ARCH}-${ESP_CHIP}-elf --host=${ESP_CHIP_ARCH}-${ESP_CHIP}-elf
    - make site.exp
    - if [ ${ESP_CHIP_ARCH} == "xtensa" ]; then XTENSA_TARGET=${ESP_CHIP} make -C esp_bin_generator; fi
    - test "${CI_JOB_NAME##*-}" != "without_python" && pyenv local ${PYTHON_VERSION}
    - test "${CI_JOB_NAME##*-}" == "without_python" && export ESPTOOL_PATH="/opt/pyenv/pyenv-2.2.2/versions/3.6.0/bin/esptool.py"
    - test "${CI_JOB_NAME##*-}" == "without_python" && export GDB_PYTHON_TESTS=""
    - ESP_DEBUG_TRACE=1 ${GDB_DIST_DIR}/bin/${ESP_CHIP_ARCH}-${ESP_CHIP}-elf-gdb --version
    - TESTS_TO_RUN="${GDB_BASE_TESTS} ${GDB_BASE_TESTS_FOR_TARGET} ${GDB_PYTHON_TESTS} gdb.${ESP_CHIP_ARCH}-${ESP_CHIP}/*.exp"
    - runtest --tool gdb --status --target ${ESP_CHIP_ARCH}-${ESP_CHIP}-elf --target_board=simesp GDB=${GDB_DIST_DIR}/bin/${ESP_CHIP_ARCH}-${ESP_CHIP}-elf-gdb $TESTS_TO_RUN

# Template for others tests without qemu
.test_no_qemu_template: &test_no_qemu_template
  stage: test
  artifacts:
    when: on_failure
    paths:
      - ${CI_PROJECT_DIR}/gdb/testsuite/gdb.log
  script:
    - cd gdb/testsuite
    - cp -R ${GDB_DIST_DIR}/share/gdb/* ../data-directory/
    - ./configure --target=${ESP_CHIP_ARCH}-${ESP_CHIP}-elf --host=${ESP_CHIP_ARCH}-${ESP_CHIP}-elf 
    - make site.exp
    - echo "GDB_BASE_TESTS $GDB_BASE_TESTS"
    - test "${CI_JOB_NAME##*-}" != "without_python" && pyenv local ${PYTHON_VERSION}
    - ESP_DEBUG_TRACE=1 ${GDB_DIST_DIR}/bin/${ESP_CHIP_ARCH}-${ESP_CHIP}-elf-gdb --version
    - TESTS_TO_RUN="${GDB_BASE_TESTS} gdb.${ESP_CHIP_ARCH}-${ESP_CHIP}/*.exp"
    - runtest --tool gdb --status --target ${ESP_CHIP_ARCH}-${ESP_CHIP}-elf GDB=${GDB_DIST_DIR}/bin/${ESP_CHIP_ARCH}-${ESP_CHIP}-elf-gdb $TESTS_TO_RUN

.windows_test_corefile: &windows_test_corefile |
  & $env:GDB_DIST_DIR\bin\$env:ESP_CHIP_ARCH-$env:ESP_CHIP-elf-gdb $chip_tests_dir\corefile.elf $chip_tests_dir\corefile.core -ex "bt" -ex "quit" | Tee-Object -FilePath test_corefile_out.txt
  $stringmatch = Get-Content -Raw -Path test_corefile_out.txt
  $pattern = Get-Content -Raw -Path $chip_tests_dir\corefile_pattern.txt
  Select-String -InputObject $stringmatch -pattern $pattern -OutVariable patternMatch
  if(!$patternMatch) {exit 1}

.windows_test_tdep: &windows_test_tdep |
  & $env:GDB_DIST_DIR\bin\$env:ESP_CHIP_ARCH-$env:ESP_CHIP-elf-gdb -ex '\"maint print arch\"' -ex "quit" | Tee-Object -FilePath test_tdep_out.txt
  $stringmatch = Get-Content -Raw -Path test_tdep_out.txt
  $pattern = Get-Content -Raw -Path $chip_tests_dir\tdep_pattern.txt
  Select-String -InputObject $stringmatch -pattern $pattern -OutVariable patternMatch
  if(!$patternMatch) {exit 1}

# Template for windows
.test_windows_template: &test_windows_template
  stage: test
  variables:
    GIT_SUBMODULE_STRATEGY: none
  inherit:
    default: false
  script:
    - $chip_tests_dir="$env:CI_PROJECT_DIR\gdb\testsuite\gdb.$env:ESP_CHIP_ARCH-$env:ESP_CHIP"
    - *windows_test_corefile
    - *windows_test_tdep

# Template for macos
.test_macos_template: &test_macos_template
  stage: test
  artifacts:
    when: on_failure
    paths:
      - ${CI_PROJECT_DIR}/gdb/testsuite/gdb.log
  variables:
    GIT_SUBMODULE_STRATEGY: none
  inherit:
    default: false
  before_script:
    - set -o errexit; set -o pipefail; set -o nounset
    - test "${DEBUG_SHELL:-''}" = "1" && set -x
    - curl -LO http://ftp.gnu.org/gnu/dejagnu/dejagnu-1.6.3.tar.gz
    - tar -xf dejagnu-1.6.3.tar.gz
    - pushd dejagnu-1.6.3
    - ./configure
    - make
    - export PATH="$PWD:$PATH"
    - popd
    - eval "$(pyenv init --path)"
  script:
    - cd gdb/testsuite
    - cp -R ${GDB_DIST_DIR}/share/gdb/* ../data-directory/
    - ./configure
    - make site.exp
    - pyenv local $TEST_PYTHON_VERSION
    - python3 -V
    - ESP_DEBUG_TRACE=1 ${GDB_DIST_DIR}/bin/${ESP_CHIP_ARCH}-${ESP_CHIP}-elf-gdb --version
    - runtest --tool gdb --status --target ${ESP_CHIP_ARCH}-${ESP_CHIP}-elf GDB=${GDB_DIST_DIR}/bin/${ESP_CHIP_ARCH}-${ESP_CHIP}-elf-gdb gdb.${ESP_CHIP_ARCH}-${ESP_CHIP}/*.exp

# Pack build output
.pack_template: &pack_template
  stage: pack
  tags: [ "build", "amd64" ]
  rules:
    - if: $CI_COMMIT_TAG
    - if: '$CI_COMMIT_TAG =~ "/^$/"'
      when: manual
  allow_failure: true
  variables:
    GIT_SUBMODULE_STRATEGY: none
  artifacts:
    paths:
      - ${GDB_DIST_DIR}/*.${ARCHIVE_EXT}
    when: always
    expire_in: 1 week
  script:
    - *get_release_version
    - GDB_BASE_NAME=${ESP_CHIP_ARCH}-esp-elf-gdb
    - ARCHIVE_NAME=${GDB_BASE_NAME}-${ESP_GDB_VERSION}-${PLATFORM_NAME}.${ARCHIVE_EXT}
    - mv ${GDB_DIST_DIR} ${GDB_BASE_NAME}
    - ${ARCHIVE_TOOL} ${ARCHIVE_NAME} ${GDB_BASE_NAME}
    - mkdir ${GDB_DIST_DIR}
    - mv ${ARCHIVE_NAME} ${GDB_DIST_DIR}/

upload_to_http:
  stage: private_deploy
  <<: *needs_all_distros
  tags:
    - deploy
    - shiny
  when: manual
  allow_failure: true
  variables:
    GIT_STRATEGY: none
  artifacts:
    reports:
      dotenv: ${GDB_DIST_DIR}/build.env
  before_script:
    - set -o errexit; set -o pipefail; set -o nounset
    - test "${DEBUG_SHELL:-''}" = "1" && set -x
    - *use_ci_tools
  script:
    - *get_release_version
    - cit_add_ssh_key "${HTTP_UPLOAD_KEY}" "$(cit_parse_url_host ${HTTP_UPLOAD_DIR})"
    - cd ${GDB_DIST_DIR}
    - *gen_sha256_file
    - FILES="$SHA256_FILE $(find . -type f -name "*esp-elf-gdb-${ESP_GDB_VERSION}*")"
    - scp ${FILES} ${HTTP_UPLOAD_DIR}/
    - echo -e "\nArchives were published there:\n\n$(for n in ${FILES}; do echo "${HTTP_PUBLIC_DIR}/${n}"; done)\n"
    - echo "NEW_GDB_ARMHF_DISTRO_URL=${HTTP_PUBLIC_DIR}/xtensa-esp-elf-gdb-${ESP_GDB_VERSION}-arm-linux-gnueabihf.${LINUX_ARCHIVE_EXT}" >> ${GDB_DIST_DIR}/build.env
    - echo "NEW_GDB_ARMHF_DISTRO_DIR=xtensa-esp-elf-gdb" >> ${GDB_DIST_DIR}/build.env

test_with_openocd:
  stage: test
  when: manual
  allow_failure: true
  variables:
    GDB_ARMHF_DISTRO_URL: ${NEW_GDB_ARMHF_DISTRO_URL}
    NEW_GDB_ARMHF_DISTRO_DIR: ${NEW_GDB_ARMHF_DISTRO_DIR}
  needs: [ upload_to_http ]
  trigger:
    project: idf/openocd-esp32
    strategy: depend

release_tag:
  stage: release_submit
  tags: [ "amd64", "internet" ]
  <<: *needs_all_distros
  <<: *release_tag_filter
  <<: *release_submit_action
  artifacts:
    reports:
      dotenv: ${GDB_DIST_DIR}/build.env
  script:
    - *get_release_version
    - hub release delete ${GH_REL_TAG} || true
    # List of archives
    - cd ${GDB_DIST_DIR}
    - *gen_sha256_file
    - FILES_LIST=$(find * -type f -name "*esp-elf-gdb-${ESP_GDB_VERSION}*")
    - ATTACH_FILE_OPTIONS=$(printf -- "-a %s " $FILES_LIST)
    - ATTACH_FILE_OPTIONS="-a $SHA256_FILE $ATTACH_FILE_OPTIONS"
    # Create pre-release with archives attached
    - hub release create --prerelease -m "${ESP_GDB_VERSION}" ${ATTACH_FILE_OPTIONS} ${GH_REL_TAG}
    - echo "IDF_TOOLS_GDB_VERSION=${ESP_GDB_VERSION}" >> ${GDB_DIST_DIR}/build.env

update_idf_tools:
  stage: update_idf_tools
  needs: [ release_tag ]
  when: manual
  allow_failure: true
  <<: *release_tag_filter
  variables:
    TOOL_NAME: "gdb"
    TOOL_MEMBERS: "xtensa-esp-elf-gdb riscv32-esp-elf-gdb"
    TOOL_VERSION: ${IDF_TOOLS_GDB_VERSION}
    TOOL_SHA256_URL: "https://github.com/espressif/binutils-gdb/releases/download/${CI_COMMIT_TAG}/esp-gdb-${IDF_TOOLS_GDB_VERSION}-checksum.sha256"
  trigger:
    project: idf/idf-tools-updater
    strategy: depend
